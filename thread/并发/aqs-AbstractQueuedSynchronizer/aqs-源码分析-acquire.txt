用于获取独占资源
public final void acquire(int arg) {
	if (!tryAcquire(arg) &&
		acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
		selfInterrupt();
}

整体流程：
. 请求资源
. 该资源是否可以被请求（由子类的tryAcquire来实现）
	如果可以请求得到，则线程未被阻塞，则继续执行
	否则，
		生成一个节点（代表了本次请求），插入到链表尾部
		当该节点是head的后继时，再次尝试是否可获得资源
		当还是获取不到时，阻塞线程
			需要：前继节点的status需要为SIGNAL，为了：该前继节点释放资源后，需要唤醒其后继节点（即是：自身节点）的thread 来试图获取资源（重走acquireQueued中的for）			

tryAcquire
参见：
. ReentrantLock中的实现
. aqs-总述.txt 中的 state部分
			
//试图获得锁（此时已经生成了节点，位于链表中）
//注意：即使生成了节点 位于链表中，还是可以一次获得资源的
	//如：轮到自己请求时，之前占用资源的线程释放了资源（而之前，自己通过tryAcquire没有获得到资源（CAS把state从0设置为1时 失败，或，之前占用资源的线程 并非 自己线程））
//而当之前占用资源的线程释放了资源，唤醒了head后继，后继线程还是会继续走for循环来 试图获取资源
//返回：node是否被interrupt
final boolean acquireQueued(final Node node, int arg) {
	boolean failed = true;
	try {
		boolean interrupted = false;
		//这里开启了一个for循环，为什么：
		//当一个节点因为未获得资源，而被park
		//当release资源时，会唤醒 head的后继Node的thread
		//该thread被唤醒后，继续执行for循环：试图获得锁（当获取到锁后，自身成为head节点）
		//--
		//为什么head的后继节点可以试图获得锁：
		//当一个节点释放资源时，head节点仍然存在于链表中（并没有被删除），而后继节点被唤醒后，可以获得资源
		for (;;) {
			final Node p = node.predecessor();
			if (p == head && tryAcquire(arg)) {
				setHead(node);
				p.next = null; // help GC
				failed = false;
				return interrupted;
			}
			if (shouldParkAfterFailedAcquire(p, node) &&
				parkAndCheckInterrupt())
				interrupted = true;
		}
	} finally {
		if (failed)
			cancelAcquire(node);
	}
}

//设置前继节点的waitStatus为SIGNAL
//返回：是否需要park 当前Node.thread
//注意：该方法可能会调整node链，也可能会被并发调用
//--
//为什么并发调用时，还是正常的：
//设node1.thread 和 node2.thread上 均在执行该方法，则意味着node1和node2均未获取到资源，且node1一定在node2的前面
//这里的调整node链，仅仅是在重设Node.prev（=一个没被cancel的Node）
//则一般情况下，node2.prev最差的情况下为node1（既是：node2并不会调整 node1之前的Node链）
//则，并发调用是安全的
//--
//为什么要返回 可能的false：
//当返回false时，则意味着暂时不park节点，而是继续for循环：tryAcquire（有可能会获得资源）
//一种情况，当前只有一个head，其正在执行release
//在执行release的过程中（还未设置state为0），有thread2请求资源
//则thread2请求资源失败，生成节点2并加入到队列中，且在acquireQueue时，因为其前继是head，会再次请求资源，但还是失败，则进行shouldPark
//分支1
	//而head线程继续执行，因为其waitStatus不为SIGNAL（还是为0），则未唤醒后继节点
	//转到节点2线程，其必须返回到acquireQueue中的for循环（因为head之前已经release了，且，并未唤醒后继节点）
	//则节点2线程中，因为前继的waitStatus并不为SIGNAL，则设置了前继的waitStatus后（为SIGNAL），最终返回了false
	//则可以再次执行acquireQueue的for循环，并最终获得了资源
//分支2
	thread2继续往下执行，设置了head.waitStatus为SIGNAL，并因为返回了false而继续执行acquireQueue来请求资源，但还是失败
	而此刻再进入到shouldPark，因为前继的waitStatus已经为SIGNAL，则返回了true
	接下来，会执行park（但还未真实执行），
	此刻，转到head线程执行，因为其waitStatus为SIGNAL（不为0），则会唤醒head的后继（即是节点2）（注意：此刻节点2还未执行LockSupport.park）
	回到thread2来执行park，因为之前已经有线程执行了LockSupport.unpark(thread2)，则此刻的LockSupport.park会立刻返回
	再次回到acquireQueue的for循环来请求资源，最终请求到
private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {
	int ws = pred.waitStatus;
	if (ws == Node.SIGNAL)
		/*
		 * This node has already set status asking a release
		 * to signal it, so it can safely park.
		 */
		return true;
		
	//CANCELED值为1（也只有该status是>0的）
	//如果前继的状态为cancel，那么向前寻找一个status不为cancel的节点，并使其成为node的前继（对节点链进行调整）
	//注意：这里的调整，仅仅是修改node.prev 和 最终prev.next，其间无效节点的next和prev是不修改的
	//是否产生并发问题：
		//如果线程1和线程2 都来shouldParkAfterFailedAcquire，则，两线程对应的Node（设为node1, node2），肯定存在 链表上的 先后关系
		//则，在不考虑cancel操作（AbstractQueuedSynchronizer#cancelAcquire）的情况下，node2的prev 最差情况下 为node1（而非node1之前的节点）
		//该情况下，会改变node1.next
		//设 线程2从此后，就一直未执行（注意：未被park）直到 线程1获得了资源 执行了逻辑 释放了资源后
		//当node1.next=node2被执行了，node1开始唤醒其next，线程2空被unpark
			//随后，线程2执行，会返回到acquireQueued继续执行for，因为其前继为head，则其最终很可能获得了资源
		//当node1.next=node2并未被执行，node1开始唤醒其next，线程2空被unpark
			//但其当前的next是被cancel的，那么会从tail来找到一个有效的node（即是node2），最后唤醒node2，线程2空被unpark
			//随后，线程2执行，node1.next=node2，会返回到acquireQueued继续执行for，会因为其前继是head，则其最终很可能获得了资源
		//则，不管如何，执行结果都是正确的，即使：共享变量在 并发读写
	//注意：此刻，函数返回值为false，则之后会再次进入acquireQueued的for循环中
	//则有可能经过该前继的调整，node的前继就为head了，可以试图获得资源了
	//也有可能node.thread被真的park
	if (ws > 0) {
		/*
		 * Predecessor was cancelled. Skip over predecessors and
		 * indicate retry.
		 */
		do {
			node.prev = pred = pred.prev;
		} while (pred.waitStatus > 0);
		pred.next = node;
	}
	//设置前继节点的status为SIGNAL（允许CAS失败）
	else {
		/*
		 * waitStatus must be 0 or PROPAGATE.  Indicate that we
		 * need a signal, but don't park yet.  Caller will need to
		 * retry to make sure it cannot acquire before parking.
		 */
		//这里并不在意ws是否真的设置为了SIGNAL
		//因为，就算没有被设置为SIGNAL，node.thread还是会再走一遍acquireQueued的for循环，有可能因此而获得了独占资源
		compareAndSetWaitStatus(pred, ws, Node.SIGNAL);
	}
	return false;
}

//阻塞节点
//被唤醒后，返回：线程是否被interrupt
private final boolean parkAndCheckInterrupt() {
	LockSupport.park(this);
	return Thread.interrupted();
}

//取消节点
	场景：
	当执行AbstractQueuedSynchronizer#doAcquireInterruptibly时，如果在node.thread上执行了interrupt()，该线程会被立刻唤醒，
	根据Thread.interrupted()来抛出了InterruptedException
	继而执行了final语句块：AbstractQueuedSynchronizer#cancelAcquire
private void cancelAcquire(Node node) {
	if (node == null)
		return;

	node.thread = null;

	//设置prev.next=node.next
	//本质上，也没太必要设置prev.next，因为：只要node.ws为CANCELLED，则当prev为head 且 执行release时，unparkSuccessor时
	//只要node.ws>0，会从tail开始，往前找到一个合适的节点来 唤醒它
	//这里的设置prev.next纯粹为了性能
	
	//找到未被canel的prev（会调整链表结构）
	Node pred = node.prev;
	while (pred.waitStatus > 0)
		node.prev = pred = pred.prev;

	//先保存prev的当前next，为了后续的CAS
	Node predNext = pred.next;

	//设置node.ws为CANCELLED
	node.waitStatus = Node.CANCELLED;

	//如果node是tail，则prev.next为null（因为node.next为null）
	if (node == tail && compareAndSetTail(node, pred)) {
		compareAndSetNext(pred, predNext, null);
	} else {
		//否则，设置prev.next=node.next
		int ws;
		//如果prev不是head，设置prev.ws为SIGNAL，且prev.thread不为null（为null时，代表该prev被cancel，或，prev占用了资源而成为了head）
		if (pred != head &&
			((ws = pred.waitStatus) == Node.SIGNAL ||
			 (ws <= 0 && compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) &&
			pred.thread != null) {
			//即便执行到这里，pred.thread可能又变成了null（prev占用了资源，成为了head）
			//则此时，执行release时，node还有可能是prev的后继，但因为之前已经设置了node.ws为CANCELLED，则会从tail开始往前找到一个合适的node来唤醒它
			//而这里的prev.next=node.next完全就是为了性能 且 能容错（即便真实情况下，是执行了 上面描述的场景，又一个节点占用了资源成为了新head，则老head.next为null
			//则下述的CAS不一定会成功
			//而如果下述的CAS成功了，说明 老head.next=null还未被执行，但老head.next=null最终还是会被执行，则prev.next最终会为null
			//则，无论如何，都会促使GC）
			Node next = node.next;
			//当next的ws<=0，则其前继.ws一定为SIGNAL
			if (next != null && next.waitStatus <= 0)
				compareAndSetNext(pred, predNext, next);
		}
		//否则，唤醒node的后继
		//为什么：
			当prev是head，且执行了release，则要求唤醒其next
			设：node线程上 在执行cancelAcquire，但node.ws 可能还不是 CANCELLED，则head会选择node 来唤醒
			由于node已经因为interrupted而被唤醒了，所以head的release中的唤醒 本质上 无实质效果
			但如果node不继续唤醒node.next，那么整个队列上的节点永远不会被唤醒（除非那些节点.thread被interrupt），因为再也不会执行release了（node线程上执行了interrupt方法，则release可能并不会再执行（release可是 客户人工调用的哦））
		//一种情况：
			即使这里不执行unpark后继，后继节点也有可能被唤醒：
			当prev是head，但其此刻并没有执行release
			即便不执行这里的unparkSuccessor(node)，只要执行了head的release，还是会唤醒head的有效后继（node因为ws已经为CANCELLED，其不为有效后继）
			则，这里的node.next也总会被唤醒
			但是，为何还是要执行else中的unparkSuccessor：
				以防万一，且，一个线程被unpark多次也没关系：
				当一个节点被唤醒，其还是会先请求资源，当请求不到资源时，其还是会被再次阻塞
		else {
			unparkSuccessor(node);
		}

		node.next = node; // help GC
	}
}
