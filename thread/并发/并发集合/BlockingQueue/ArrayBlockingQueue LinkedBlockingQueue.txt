参见：
Java Concurrent(二)::并发集合
	http://aducode.github.io/posts/2015-10-28/java_concurrent02.html

------------------------------------------------------LinkedBlockingQueue
最大元素个数为Integer.MAX_VALUE
内部使用了两个ReentrantLock：putLock, takeLock
存在Condition：notEmpty（由takeLock提供（当空时，不能再take））, notFull（由putLock提供（当满时，不能再put））
性能上相较于ArrayBlockingQueue更好些：put/take操作 使用了不同的锁，则可以并行进行（但，同样的操作（如：put/take）还是要一个个顺序执行）
	
如何保证 队列中的元素 没有并发问题（put/take采用了不同的锁，但，数据队列只有一份）：
. 先进行 队列元素个数count检查，如果失败，则notFull/notEmpty.await而阻塞工作线程
	对于put，要求：当前队列元素个数<capacity
	对于take，要求：当前队列元素个数>0
	--
	count为AtomicInteger类型，其在enqueue和dequeue之后，才被设置
. put/take操纵 数据队列的 不同位置
	take时，从队头中取数据（老head.next.item），并设置老head.next为新head
		其中，head中不包含真实的数据（head.item==null），仅仅象征
	put时，数据被放入到队尾，只会修改tail
综上，当不满足 队列元素个数检查时，工作线程会被阻塞；而满足时，put/take会分别针对于 队列的两头进行操作（则，互不影响）

------------------------------------------------------ArrayBlockingQueue
需要指定元素个数
内部只使用了一个ReentrantLock：lock
存在Condition：notEmpty, notFull，均是由lock来提供
